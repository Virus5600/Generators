/*! For license information please see index.js.LICENSE.txt */
(()=>{var t={1216:(t,e,n)=>{"use strict";n.r(e),n.d(e,{afterMain:()=>O,afterRead:()=>y,afterWrite:()=>A,applyStyles:()=>P,arrow:()=>X,auto:()=>a,basePlacements:()=>l,beforeMain:()=>w,beforeRead:()=>v,beforeWrite:()=>x,bottom:()=>o,clippingParents:()=>f,computeStyles:()=>nt,createPopper:()=>Pt,createPopperBase:()=>Dt,createPopperLite:()=>Lt,detectOverflow:()=>bt,end:()=>u,eventListeners:()=>ot,flip:()=>yt,hide:()=>Ot,left:()=>s,main:()=>_,modifierPhases:()=>T,offset:()=>xt,placements:()=>g,popper:()=>p,popperGenerator:()=>St,popperOffsets:()=>Et,preventOverflow:()=>At,read:()=>b,reference:()=>h,right:()=>i,start:()=>c,top:()=>r,variationPlacements:()=>m,viewport:()=>d,write:()=>E});var r="top",o="bottom",i="right",s="left",a="auto",l=[r,o,i,s],c="start",u="end",f="clippingParents",d="viewport",p="popper",h="reference",m=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+u])}),[]),g=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+u])}),[]),v="beforeRead",b="read",y="afterRead",w="beforeMain",_="main",O="afterMain",x="beforeWrite",E="write",A="afterWrite",T=[v,b,y,w,_,O,x,E,A];function j(t){return t?(t.nodeName||"").toLowerCase():null}function k(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function C(t){return t instanceof k(t).Element||t instanceof Element}function S(t){return t instanceof k(t).HTMLElement||t instanceof HTMLElement}function D(t){return"undefined"!=typeof ShadowRoot&&(t instanceof k(t).ShadowRoot||t instanceof ShadowRoot)}const P={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},r=e.attributes[t]||{},o=e.elements[t];S(o)&&j(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(t){var e=r[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var r=e.elements[t],o=e.attributes[t]||{},i=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});S(r)&&j(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(t){r.removeAttribute(t)})))}))}},requires:["computeStyles"]};function L(t){return t.split("-")[0]}var M=Math.max,N=Math.min,H=Math.round;function F(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function R(){return!/^((?!chrome|android).)*safari/i.test(F())}function I(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var r=t.getBoundingClientRect(),o=1,i=1;e&&S(t)&&(o=t.offsetWidth>0&&H(r.width)/t.offsetWidth||1,i=t.offsetHeight>0&&H(r.height)/t.offsetHeight||1);var s=(C(t)?k(t):window).visualViewport,a=!R()&&n,l=(r.left+(a&&s?s.offsetLeft:0))/o,c=(r.top+(a&&s?s.offsetTop:0))/i,u=r.width/o,f=r.height/i;return{width:u,height:f,top:c,right:l+u,bottom:c+f,left:l,x:l,y:c}}function W(t){var e=I(t),n=t.offsetWidth,r=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-r)<=1&&(r=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:r}}function z(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&D(n)){var r=e;do{if(r&&t.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function q(t){return k(t).getComputedStyle(t)}function B(t){return["table","td","th"].indexOf(j(t))>=0}function $(t){return((C(t)?t.ownerDocument:t.document)||window.document).documentElement}function V(t){return"html"===j(t)?t:t.assignedSlot||t.parentNode||(D(t)?t.host:null)||$(t)}function Y(t){return S(t)&&"fixed"!==q(t).position?t.offsetParent:null}function Q(t){for(var e=k(t),n=Y(t);n&&B(n)&&"static"===q(n).position;)n=Y(n);return n&&("html"===j(n)||"body"===j(n)&&"static"===q(n).position)?e:n||function(t){var e=/firefox/i.test(F());if(/Trident/i.test(F())&&S(t)&&"fixed"===q(t).position)return null;var n=V(t);for(D(n)&&(n=n.host);S(n)&&["html","body"].indexOf(j(n))<0;){var r=q(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||e&&"filter"===r.willChange||e&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(t)||e}function U(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function K(t,e,n){return M(t,N(e,n))}function J(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function G(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const X={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,a=t.name,c=t.options,u=n.elements.arrow,f=n.modifiersData.popperOffsets,d=L(n.placement),p=U(d),h=[s,i].indexOf(d)>=0?"height":"width";if(u&&f){var m=function(t,e){return J("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:G(t,l))}(c.padding,n),g=W(u),v="y"===p?r:s,b="y"===p?o:i,y=n.rects.reference[h]+n.rects.reference[p]-f[p]-n.rects.popper[h],w=f[p]-n.rects.reference[p],_=Q(u),O=_?"y"===p?_.clientHeight||0:_.clientWidth||0:0,x=y/2-w/2,E=m[v],A=O-g[h]-m[b],T=O/2-g[h]/2+x,j=K(E,T,A),k=p;n.modifiersData[a]=((e={})[k]=j,e.centerOffset=j-T,e)}},effect:function(t){var e=t.state,n=t.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=e.elements.popper.querySelector(r)))&&z(e.elements.popper,r)&&(e.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Z(t){return t.split("-")[1]}var tt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function et(t){var e,n=t.popper,a=t.popperRect,l=t.placement,c=t.variation,f=t.offsets,d=t.position,p=t.gpuAcceleration,h=t.adaptive,m=t.roundOffsets,g=t.isFixed,v=f.x,b=void 0===v?0:v,y=f.y,w=void 0===y?0:y,_="function"==typeof m?m({x:b,y:w}):{x:b,y:w};b=_.x,w=_.y;var O=f.hasOwnProperty("x"),x=f.hasOwnProperty("y"),E=s,A=r,T=window;if(h){var j=Q(n),C="clientHeight",S="clientWidth";if(j===k(n)&&"static"!==q(j=$(n)).position&&"absolute"===d&&(C="scrollHeight",S="scrollWidth"),l===r||(l===s||l===i)&&c===u)A=o,w-=(g&&j===T&&T.visualViewport?T.visualViewport.height:j[C])-a.height,w*=p?1:-1;if(l===s||(l===r||l===o)&&c===u)E=i,b-=(g&&j===T&&T.visualViewport?T.visualViewport.width:j[S])-a.width,b*=p?1:-1}var D,P=Object.assign({position:d},h&&tt),L=!0===m?function(t,e){var n=t.x,r=t.y,o=e.devicePixelRatio||1;return{x:H(n*o)/o||0,y:H(r*o)/o||0}}({x:b,y:w},k(n)):{x:b,y:w};return b=L.x,w=L.y,p?Object.assign({},P,((D={})[A]=x?"0":"",D[E]=O?"0":"",D.transform=(T.devicePixelRatio||1)<=1?"translate("+b+"px, "+w+"px)":"translate3d("+b+"px, "+w+"px, 0)",D)):Object.assign({},P,((e={})[A]=x?w+"px":"",e[E]=O?b+"px":"",e.transform="",e))}const nt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,s=void 0===i||i,a=n.roundOffsets,l=void 0===a||a,c={placement:L(e.placement),variation:Z(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,et(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,et(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var rt={passive:!0};const ot={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=t.options,o=r.scroll,i=void 0===o||o,s=r.resize,a=void 0===s||s,l=k(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return i&&c.forEach((function(t){t.addEventListener("scroll",n.update,rt)})),a&&l.addEventListener("resize",n.update,rt),function(){i&&c.forEach((function(t){t.removeEventListener("scroll",n.update,rt)})),a&&l.removeEventListener("resize",n.update,rt)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function st(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var at={start:"end",end:"start"};function lt(t){return t.replace(/start|end/g,(function(t){return at[t]}))}function ct(t){var e=k(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function ut(t){return I($(t)).left+ct(t).scrollLeft}function ft(t){var e=q(t),n=e.overflow,r=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function dt(t){return["html","body","#document"].indexOf(j(t))>=0?t.ownerDocument.body:S(t)&&ft(t)?t:dt(V(t))}function pt(t,e){var n;void 0===e&&(e=[]);var r=dt(t),o=r===(null==(n=t.ownerDocument)?void 0:n.body),i=k(r),s=o?[i].concat(i.visualViewport||[],ft(r)?r:[]):r,a=e.concat(s);return o?a:a.concat(pt(V(s)))}function ht(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function mt(t,e,n){return e===d?ht(function(t,e){var n=k(t),r=$(t),o=n.visualViewport,i=r.clientWidth,s=r.clientHeight,a=0,l=0;if(o){i=o.width,s=o.height;var c=R();(c||!c&&"fixed"===e)&&(a=o.offsetLeft,l=o.offsetTop)}return{width:i,height:s,x:a+ut(t),y:l}}(t,n)):C(e)?function(t,e){var n=I(t,!1,"fixed"===e);return n.top=n.top+t.clientTop,n.left=n.left+t.clientLeft,n.bottom=n.top+t.clientHeight,n.right=n.left+t.clientWidth,n.width=t.clientWidth,n.height=t.clientHeight,n.x=n.left,n.y=n.top,n}(e,n):ht(function(t){var e,n=$(t),r=ct(t),o=null==(e=t.ownerDocument)?void 0:e.body,i=M(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=M(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-r.scrollLeft+ut(t),l=-r.scrollTop;return"rtl"===q(o||n).direction&&(a+=M(n.clientWidth,o?o.clientWidth:0)-i),{width:i,height:s,x:a,y:l}}($(t)))}function gt(t,e,n,r){var o="clippingParents"===e?function(t){var e=pt(V(t)),n=["absolute","fixed"].indexOf(q(t).position)>=0&&S(t)?Q(t):t;return C(n)?e.filter((function(t){return C(t)&&z(t,n)&&"body"!==j(t)})):[]}(t):[].concat(e),i=[].concat(o,[n]),s=i[0],a=i.reduce((function(e,n){var o=mt(t,n,r);return e.top=M(o.top,e.top),e.right=N(o.right,e.right),e.bottom=N(o.bottom,e.bottom),e.left=M(o.left,e.left),e}),mt(t,s,r));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function vt(t){var e,n=t.reference,a=t.element,l=t.placement,f=l?L(l):null,d=l?Z(l):null,p=n.x+n.width/2-a.width/2,h=n.y+n.height/2-a.height/2;switch(f){case r:e={x:p,y:n.y-a.height};break;case o:e={x:p,y:n.y+n.height};break;case i:e={x:n.x+n.width,y:h};break;case s:e={x:n.x-a.width,y:h};break;default:e={x:n.x,y:n.y}}var m=f?U(f):null;if(null!=m){var g="y"===m?"height":"width";switch(d){case c:e[m]=e[m]-(n[g]/2-a[g]/2);break;case u:e[m]=e[m]+(n[g]/2-a[g]/2)}}return e}function bt(t,e){void 0===e&&(e={});var n=e,s=n.placement,a=void 0===s?t.placement:s,c=n.strategy,u=void 0===c?t.strategy:c,m=n.boundary,g=void 0===m?f:m,v=n.rootBoundary,b=void 0===v?d:v,y=n.elementContext,w=void 0===y?p:y,_=n.altBoundary,O=void 0!==_&&_,x=n.padding,E=void 0===x?0:x,A=J("number"!=typeof E?E:G(E,l)),T=w===p?h:p,j=t.rects.popper,k=t.elements[O?T:w],S=gt(C(k)?k:k.contextElement||$(t.elements.popper),g,b,u),D=I(t.elements.reference),P=vt({reference:D,element:j,strategy:"absolute",placement:a}),L=ht(Object.assign({},j,P)),M=w===p?L:D,N={top:S.top-M.top+A.top,bottom:M.bottom-S.bottom+A.bottom,left:S.left-M.left+A.left,right:M.right-S.right+A.right},H=t.modifiersData.offset;if(w===p&&H){var F=H[a];Object.keys(N).forEach((function(t){var e=[i,o].indexOf(t)>=0?1:-1,n=[r,o].indexOf(t)>=0?"y":"x";N[t]+=F[n]*e}))}return N}const yt={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,u=t.name;if(!e.modifiersData[u]._skip){for(var f=n.mainAxis,d=void 0===f||f,p=n.altAxis,h=void 0===p||p,v=n.fallbackPlacements,b=n.padding,y=n.boundary,w=n.rootBoundary,_=n.altBoundary,O=n.flipVariations,x=void 0===O||O,E=n.allowedAutoPlacements,A=e.options.placement,T=L(A),j=v||(T===A||!x?[st(A)]:function(t){if(L(t)===a)return[];var e=st(t);return[lt(t),e,lt(e)]}(A)),k=[A].concat(j).reduce((function(t,n){return t.concat(L(n)===a?function(t,e){void 0===e&&(e={});var n=e,r=n.placement,o=n.boundary,i=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?g:c,f=Z(r),d=f?a?m:m.filter((function(t){return Z(t)===f})):l,p=d.filter((function(t){return u.indexOf(t)>=0}));0===p.length&&(p=d);var h=p.reduce((function(e,n){return e[n]=bt(t,{placement:n,boundary:o,rootBoundary:i,padding:s})[L(n)],e}),{});return Object.keys(h).sort((function(t,e){return h[t]-h[e]}))}(e,{placement:n,boundary:y,rootBoundary:w,padding:b,flipVariations:x,allowedAutoPlacements:E}):n)}),[]),C=e.rects.reference,S=e.rects.popper,D=new Map,P=!0,M=k[0],N=0;N<k.length;N++){var H=k[N],F=L(H),R=Z(H)===c,I=[r,o].indexOf(F)>=0,W=I?"width":"height",z=bt(e,{placement:H,boundary:y,rootBoundary:w,altBoundary:_,padding:b}),q=I?R?i:s:R?o:r;C[W]>S[W]&&(q=st(q));var B=st(q),$=[];if(d&&$.push(z[F]<=0),h&&$.push(z[q]<=0,z[B]<=0),$.every((function(t){return t}))){M=H,P=!1;break}D.set(H,$)}if(P)for(var V=function(t){var e=k.find((function(e){var n=D.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return M=e,"break"},Y=x?3:1;Y>0;Y--){if("break"===V(Y))break}e.placement!==M&&(e.modifiersData[u]._skip=!0,e.placement=M,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function wt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function _t(t){return[r,i,o,s].some((function(e){return t[e]>=0}))}const Ot={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,r=e.rects.reference,o=e.rects.popper,i=e.modifiersData.preventOverflow,s=bt(e,{elementContext:"reference"}),a=bt(e,{altBoundary:!0}),l=wt(s,r),c=wt(a,o,i),u=_t(l),f=_t(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":f})}};const xt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,o=t.name,a=n.offset,l=void 0===a?[0,0]:a,c=g.reduce((function(t,n){return t[n]=function(t,e,n){var o=L(t),a=[s,r].indexOf(o)>=0?-1:1,l="function"==typeof n?n(Object.assign({},e,{placement:t})):n,c=l[0],u=l[1];return c=c||0,u=(u||0)*a,[s,i].indexOf(o)>=0?{x:u,y:c}:{x:c,y:u}}(n,e.rects,l),t}),{}),u=c[e.placement],f=u.x,d=u.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=f,e.modifiersData.popperOffsets.y+=d),e.modifiersData[o]=c}};const Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=vt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}};const At={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,a=t.name,l=n.mainAxis,u=void 0===l||l,f=n.altAxis,d=void 0!==f&&f,p=n.boundary,h=n.rootBoundary,m=n.altBoundary,g=n.padding,v=n.tether,b=void 0===v||v,y=n.tetherOffset,w=void 0===y?0:y,_=bt(e,{boundary:p,rootBoundary:h,padding:g,altBoundary:m}),O=L(e.placement),x=Z(e.placement),E=!x,A=U(O),T="x"===A?"y":"x",j=e.modifiersData.popperOffsets,k=e.rects.reference,C=e.rects.popper,S="function"==typeof w?w(Object.assign({},e.rects,{placement:e.placement})):w,D="number"==typeof S?{mainAxis:S,altAxis:S}:Object.assign({mainAxis:0,altAxis:0},S),P=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,H={x:0,y:0};if(j){if(u){var F,R="y"===A?r:s,I="y"===A?o:i,z="y"===A?"height":"width",q=j[A],B=q+_[R],$=q-_[I],V=b?-C[z]/2:0,Y=x===c?k[z]:C[z],J=x===c?-C[z]:-k[z],G=e.elements.arrow,X=b&&G?W(G):{width:0,height:0},tt=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[R],nt=tt[I],rt=K(0,k[z],X[z]),ot=E?k[z]/2-V-rt-et-D.mainAxis:Y-rt-et-D.mainAxis,it=E?-k[z]/2+V+rt+nt+D.mainAxis:J+rt+nt+D.mainAxis,st=e.elements.arrow&&Q(e.elements.arrow),at=st?"y"===A?st.clientTop||0:st.clientLeft||0:0,lt=null!=(F=null==P?void 0:P[A])?F:0,ct=q+it-lt,ut=K(b?N(B,q+ot-lt-at):B,q,b?M($,ct):$);j[A]=ut,H[A]=ut-q}if(d){var ft,dt="x"===A?r:s,pt="x"===A?o:i,ht=j[T],mt="y"===T?"height":"width",gt=ht+_[dt],vt=ht-_[pt],yt=-1!==[r,s].indexOf(O),wt=null!=(ft=null==P?void 0:P[T])?ft:0,_t=yt?gt:ht-k[mt]-C[mt]-wt+D.altAxis,Ot=yt?ht+k[mt]+C[mt]-wt-D.altAxis:vt,xt=b&&yt?function(t,e,n){var r=K(t,e,n);return r>n?n:r}(_t,ht,Ot):K(b?_t:gt,ht,b?Ot:vt);j[T]=xt,H[T]=xt-ht}e.modifiersData[a]=H}},requiresIfExists:["offset"]};function Tt(t,e,n){void 0===n&&(n=!1);var r,o,i=S(e),s=S(e)&&function(t){var e=t.getBoundingClientRect(),n=H(e.width)/t.offsetWidth||1,r=H(e.height)/t.offsetHeight||1;return 1!==n||1!==r}(e),a=$(e),l=I(t,s,n),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(i||!i&&!n)&&(("body"!==j(e)||ft(a))&&(c=(r=e)!==k(r)&&S(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:ct(r)),S(e)?((u=I(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):a&&(u.x=ut(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function jt(t){var e=new Map,n=new Set,r=[];function o(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var r=e.get(t);r&&o(r)}})),r.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||o(t)})),r}var kt={placement:"bottom",modifiers:[],strategy:"absolute"};function Ct(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function St(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,r=void 0===n?[]:n,o=e.defaultOptions,i=void 0===o?kt:o;return function(t,e,n){void 0===n&&(n=i);var o,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},kt,i),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var o="function"==typeof n?n(a.options):n;f(),a.options=Object.assign({},i,a.options,o),a.scrollParents={reference:C(t)?pt(t):t.contextElement?pt(t.contextElement):[],popper:pt(e)};var s,c,d=function(t){var e=jt(t);return T.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(r,a.options.modifiers),c=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=d.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,r=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var i=o({state:a,name:e,instance:u,options:r}),s=function(){};l.push(i||s)}})),u.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Ct(e,n)){a.rects={reference:Tt(e,Q(n),"fixed"===a.options.strategy),popper:W(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var r=0;r<a.orderedModifiers.length;r++)if(!0!==a.reset){var o=a.orderedModifiers[r],i=o.fn,s=o.options,l=void 0===s?{}:s,f=o.name;"function"==typeof i&&(a=i({state:a,options:l,name:f,instance:u})||a)}else a.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(t){u.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){f(),c=!0}};if(!Ct(t,e))return u;function f(){l.forEach((function(t){return t()})),l=[]}return u.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var Dt=St(),Pt=St({defaultModifiers:[ot,Et,nt,P,xt,yt,At,X,Ot]}),Lt=St({defaultModifiers:[ot,Et,nt,P]})},9011:function(t,e,n){t.exports=function(t,e,n,r){"use strict";const o="5.3.3";class i extends n{constructor(e,n){super(),(e=r.getElement(e))&&(this._element=e,this._config=this._getConfig(n),t.set(this._element,this.constructor.DATA_KEY,this))}dispose(){t.remove(this._element,this.constructor.DATA_KEY),e.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,n=!0){r.executeAfterTransition(t,e,n)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(e){return t.get(r.getElement(e),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return o}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}return i}(n(7269),n(7956),n(2105),n(4035))},7269:function(t){t.exports=function(){"use strict";const t=new Map;return{set(e,n,r){t.has(e)||t.set(e,new Map);const o=t.get(e);o.has(n)||0===o.size?o.set(n,r):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(o.keys())[0]}.`)},get:(e,n)=>t.has(e)&&t.get(e).get(n)||null,remove(e,n){if(!t.has(e))return;const r=t.get(e);r.delete(n),0===r.size&&t.delete(e)}}}()},7956:function(t,e,n){t.exports=function(t){"use strict";const e=/[^.]*(?=\..*)\.|.*/,n=/\..*/,r=/::\d+$/,o={};let i=1;const s={mouseenter:"mouseover",mouseleave:"mouseout"},a=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function l(t,e){return e&&`${e}::${i++}`||t.uidEvent||i++}function c(t){const e=l(t);return t.uidEvent=e,o[e]=o[e]||{},o[e]}function u(t,e){return function n(r){return y(r,{delegateTarget:t}),n.oneOff&&b.off(t,r.type,e),e.apply(t,[r])}}function f(t,e,n){return function r(o){const i=t.querySelectorAll(e);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(const a of i)if(a===s)return y(o,{delegateTarget:s}),r.oneOff&&b.off(t,o.type,e,n),n.apply(s,[o])}}function d(t,e,n=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===n))}function p(t,e,n){const r="string"==typeof e,o=r?n:e||n;let i=v(t);return a.has(i)||(i=t),[r,o,i]}function h(t,n,r,o,i){if("string"!=typeof n||!t)return;let[a,h,m]=p(n,r,o);if(n in s){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};h=t(h)}const g=c(t),v=g[m]||(g[m]={}),b=d(v,h,a?r:null);if(b)return void(b.oneOff=b.oneOff&&i);const y=l(h,n.replace(e,"")),w=a?f(t,r,h):u(t,h);w.delegationSelector=a?r:null,w.callable=h,w.oneOff=i,w.uidEvent=y,v[y]=w,t.addEventListener(m,w,a)}function m(t,e,n,r,o){const i=d(e[n],r,o);i&&(t.removeEventListener(n,i,Boolean(o)),delete e[n][i.uidEvent])}function g(t,e,n,r){const o=e[n]||{};for(const[i,s]of Object.entries(o))i.includes(r)&&m(t,e,n,s.callable,s.delegationSelector)}function v(t){return t=t.replace(n,""),s[t]||t}const b={on(t,e,n,r){h(t,e,n,r,!1)},one(t,e,n,r){h(t,e,n,r,!0)},off(t,e,n,o){if("string"!=typeof e||!t)return;const[i,s,a]=p(e,n,o),l=a!==e,u=c(t),f=u[a]||{},d=e.startsWith(".");if(void 0===s){if(d)for(const n of Object.keys(u))g(t,u,n,e.slice(1));for(const[n,o]of Object.entries(f)){const i=n.replace(r,"");l&&!e.includes(i)||m(t,u,a,o.callable,o.delegationSelector)}}else{if(!Object.keys(f).length)return;m(t,u,a,s,i?n:null)}},trigger(e,n,r){if("string"!=typeof n||!e)return null;const o=t.getjQuery();let i=null,s=!0,a=!0,l=!1;n!==v(n)&&o&&(i=o.Event(n,r),o(e).trigger(i),s=!i.isPropagationStopped(),a=!i.isImmediatePropagationStopped(),l=i.isDefaultPrevented());const c=y(new Event(n,{bubbles:s,cancelable:!0}),r);return l&&c.preventDefault(),a&&e.dispatchEvent(c),c.defaultPrevented&&i&&i.preventDefault(),c}};function y(t,e={}){for(const[n,r]of Object.entries(e))try{t[n]=r}catch(e){Object.defineProperty(t,n,{configurable:!0,get:()=>r})}return t}return b}(n(4035))},2333:function(t){t.exports=function(){"use strict";function t(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function e(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}return{setDataAttribute(t,n,r){t.setAttribute(`data-bs-${e(n)}`,r)},removeDataAttribute(t,n){t.removeAttribute(`data-bs-${e(n)}`)},getDataAttributes(e){if(!e)return{};const n={},r=Object.keys(e.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const o of r){let r=o.replace(/^bs/,"");r=r.charAt(0).toLowerCase()+r.slice(1,r.length),n[r]=t(e.dataset[o])}return n},getDataAttribute:(n,r)=>t(n.getAttribute(`data-bs-${e(r)}`))}}()},5411:function(t,e,n){t.exports=function(t){"use strict";const e=e=>{let n=e.getAttribute("data-bs-target");if(!n||"#"===n){let t=e.getAttribute("href");if(!t||!t.includes("#")&&!t.startsWith("."))return null;t.includes("#")&&!t.startsWith("#")&&(t=`#${t.split("#")[1]}`),n=t&&"#"!==t?t.trim():null}return n?n.split(",").map((e=>t.parseSelector(e))).join(","):null},n={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let r=t.parentNode.closest(e);for(;r;)n.push(r),r=r.parentNode.closest(e);return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const n=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(n,e).filter((e=>!t.isDisabled(e)&&t.isVisible(e)))},getSelectorFromElement(t){const r=e(t);return r&&n.findOne(r)?r:null},getElementFromSelector(t){const r=e(t);return r?n.findOne(r):null},getMultipleElementsFromSelector(t){const r=e(t);return r?n.find(r):[]}};return n}(n(4035))},2091:function(t,e,n){t.exports=function(t,e){"use strict";const n="popover",r=".popover-header",o=".popover-body",i={...t.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},s={...t.DefaultType,content:"(null|string|element|function)"};class a extends t{static get Default(){return i}static get DefaultType(){return s}static get NAME(){return n}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[r]:this._getTitle(),[o]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=a.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}return e.defineJQueryPlugin(a),a}(n(3029),n(4035))},3029:function(t,e,n){t.exports=function(t,e,n,r,o,i,s){"use strict";function a(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t)for(const n in t)if("default"!==n){const r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:()=>t[n]})}return e.default=t,Object.freeze(e)}const l=a(t),c="tooltip",u=new Set(["sanitize","allowList","sanitizeFn"]),f="fade",d="show",p=".tooltip-inner",h=".modal",m="hide.bs.modal",g="hover",v="focus",b="click",y="manual",w="hide",_="hidden",O="show",x="shown",E="inserted",A="click",T="focusin",j="focusout",k="mouseenter",C="mouseleave",S={AUTO:"auto",TOP:"top",RIGHT:o.isRTL()?"left":"right",BOTTOM:"bottom",LEFT:o.isRTL()?"right":"left"},D={allowList:i.DefaultAllowlist,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},P={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class L extends e{constructor(t,e){if(void 0===l)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,e),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return D}static get DefaultType(){return P}static get NAME(){return c}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),n.off(this._element.closest(h),m,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=n.trigger(this._element,this.constructor.eventName(O)),e=(o.findShadowRoot(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const r=this._getTipElement();this._element.setAttribute("aria-describedby",r.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(r),n.trigger(this._element,this.constructor.eventName(E))),this._popper=this._createPopper(r),r.classList.add(d),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))n.on(t,"mouseover",o.noop);const s=()=>{n.trigger(this._element,this.constructor.eventName(x)),!1===this._isHovered&&this._leave(),this._isHovered=!1};this._queueCallback(s,this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(n.trigger(this._element,this.constructor.eventName(w)).defaultPrevented)return;if(this._getTipElement().classList.remove(d),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))n.off(t,"mouseover",o.noop);this._activeTrigger[b]=!1,this._activeTrigger[v]=!1,this._activeTrigger[g]=!1,this._isHovered=null;const t=()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),n.trigger(this._element,this.constructor.eventName(_)))};this._queueCallback(t,this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(f,d),e.classList.add(`bs-${this.constructor.NAME}-auto`);const n=o.getUID(this.constructor.NAME).toString();return e.setAttribute("id",n),this._isAnimated()&&e.classList.add(f),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new s({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[p]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(f)}_isShown(){return this.tip&&this.tip.classList.contains(d)}_createPopper(t){const e=o.execute(this._config.placement,[this,t,this._element]),n=S[e.toUpperCase()];return l.createPopper(this._element,t,this._getPopperConfig(n))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return o.execute(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...o.execute(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)n.on(this._element,this.constructor.eventName(A),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if(e!==y){const t=e===g?this.constructor.eventName(k):this.constructor.eventName(T),r=e===g?this.constructor.eventName(C):this.constructor.eventName(j);n.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?v:g]=!0,e._enter()})),n.on(this._element,r,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?v:g]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},n.on(this._element.closest(h),m,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=r.getDataAttributes(this._element);for(const t of Object.keys(e))u.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:o.getElement(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,n]of Object.entries(this._config))this.constructor.Default[e]!==n&&(t[e]=n);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=L.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}return o.defineJQueryPlugin(L),L}(n(1216),n(9011),n(7956),n(2333),n(4035),n(2812),n(3982))},2105:function(t,e,n){t.exports=function(t,e){"use strict";class n{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(n,r){const o=e.isElement(r)?t.getDataAttribute(r,"config"):{};return{...this.constructor.Default,..."object"==typeof o?o:{},...e.isElement(r)?t.getDataAttributes(r):{},..."object"==typeof n?n:{}}}_typeCheckConfig(t,n=this.constructor.DefaultType){for(const[r,o]of Object.entries(n)){const n=t[r],i=e.isElement(n)?"element":e.toType(n);if(!new RegExp(o).test(i))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${r}" provided type "${i}" but expected type "${o}".`)}}}return n}(n(2333),n(4035))},4035:function(t,e){!function(t){"use strict";const e=1e6,n=1e3,r="transitionend",o=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),i=t=>null==t?`${t}`:Object.prototype.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase(),s=t=>{do{t+=Math.floor(Math.random()*e)}while(document.getElementById(t));return t},a=t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:r}=window.getComputedStyle(t);const o=Number.parseFloat(e),i=Number.parseFloat(r);return o||i?(e=e.split(",")[0],r=r.split(",")[0],(Number.parseFloat(e)+Number.parseFloat(r))*n):0},l=t=>{t.dispatchEvent(new Event(r))},c=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),u=t=>c(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(o(t)):null,f=t=>{if(!c(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),n=t.closest("details:not([open])");if(!n)return e;if(n!==t){const e=t.closest("summary");if(e&&e.parentNode!==n)return!1;if(null===e)return!1}return e},d=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),p=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?p(t.parentNode):null},h=()=>{},m=t=>{t.offsetHeight},g=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,v=[],b=t=>{"loading"===document.readyState?(v.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of v)t()})),v.push(t)):t()},y=()=>"rtl"===document.documentElement.dir,w=t=>{b((()=>{const e=g();if(e){const n=t.NAME,r=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=r,t.jQueryInterface)}}))},_=(t,e=[],n=t)=>"function"==typeof t?t(...e):n,O=(t,e,n=!0)=>{if(!n)return void _(t);const o=5,i=a(e)+o;let s=!1;const c=({target:n})=>{n===e&&(s=!0,e.removeEventListener(r,c),_(t))};e.addEventListener(r,c),setTimeout((()=>{s||l(e)}),i)},x=(t,e,n,r)=>{const o=t.length;let i=t.indexOf(e);return-1===i?!n&&r?t[o-1]:t[0]:(i+=n?1:-1,r&&(i=(i+o)%o),t[Math.max(0,Math.min(i,o-1))])};t.defineJQueryPlugin=w,t.execute=_,t.executeAfterTransition=O,t.findShadowRoot=p,t.getElement=u,t.getNextActiveElement=x,t.getTransitionDurationFromElement=a,t.getUID=s,t.getjQuery=g,t.isDisabled=d,t.isElement=c,t.isRTL=y,t.isVisible=f,t.noop=h,t.onDOMContentLoaded=b,t.parseSelector=o,t.reflow=m,t.toType=i,t.triggerTransitionEnd=l,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}(e)},2812:function(t,e){!function(t){"use strict";const e={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},n=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),r=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,o=(t,e)=>{const o=t.nodeName.toLowerCase();return e.includes(o)?!n.has(o)||Boolean(r.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(o)))};function i(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const r=(new window.DOMParser).parseFromString(t,"text/html"),i=[].concat(...r.body.querySelectorAll("*"));for(const t of i){const n=t.nodeName.toLowerCase();if(!Object.keys(e).includes(n)){t.remove();continue}const r=[].concat(...t.attributes),i=[].concat(e["*"]||[],e[n]||[]);for(const e of r)o(e,i)||t.removeAttribute(e.nodeName)}return r.body.innerHTML}t.DefaultAllowlist=e,t.sanitizeHtml=i,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}(e)},3982:function(t,e,n){t.exports=function(t,e,n,r){"use strict";const o="TemplateFactory",i={allowList:n.DefaultAllowlist,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},s={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},a={entry:"(string|element|function|null)",selector:"(string|element)"};class l extends e{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return i}static get DefaultType(){return s}static get NAME(){return o}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,n]of Object.entries(this._config.content))this._setContent(t,n,e);const e=t.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&e.classList.add(...n.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,n]of Object.entries(t))super._typeCheckConfig({selector:e,entry:n},a)}_setContent(e,n,o){const i=t.findOne(o,e);i&&((n=this._resolvePossibleFunction(n))?r.isElement(n)?this._putElementInTemplate(r.getElement(n),i):this._config.html?i.innerHTML=this._maybeSanitize(n):i.textContent=n:i.remove())}_maybeSanitize(t){return this._config.sanitize?n.sanitizeHtml(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return r.execute(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}return l}(n(5411),n(2105),n(2812),n(4035))}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t,e=n(2091),r=n.n(e);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){c(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,u(r.key),r)}}function l(t,e){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.add(t)}function c(t,e,n){return(e=u(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t){var e=function(t,e){if("object"!=o(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==o(e)?e:String(e)}function f(t,e,n){return m(t,e),n}function d(t,e,n,r){return m(t,e),h(n,"set"),function(t,e,n){if(e.set)e.set.call(t,n);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=n}}(t,n,r),r}function p(t,e,n){return m(t,e),h(n,"get"),function(t,e){if(e.get)return e.get.call(t);return e.value}(t,n)}function h(t,e){if(void 0===t)throw new TypeError("attempted to "+e+" private static field before its declaration")}function m(t,e){if(t!==e)throw new TypeError("Private static access of wrong provenance")}var g=new WeakSet,v=function(){function t(){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,g),!p(t,t,T)&&this instanceof t)throw Error("Tutorial is a static class and cannot be instantiated");d(t,t,C,{click:function(e){if(!t.instantiated)return!1;e.target.closest("#vs5-tutorial-overlay, #vs5-tutorial-backdrop")&&f(t,t,w).call(t),e.target.closest("button#vs5EndTutorial")&&t.end(),t.options.arrowBtns&&(e.target.closest(".vs5-tutorial-left-arrow")?f(t,t,y).call(t):e.target.closest(".vs5-tutorial-right-arrow")?f(t,t,w).call(t):e.target.closest(".vs5-tutorial-exit-btn")&&t.end())},keyDown:function(e){if(!t.instantiated)return!1;var n=e.keyCode||e.which;e.preventDefault(),e.stopPropagation(),t.keybinds.prev.includes(n)?f(t,t,y).call(t):t.keybinds.next.includes(n)?f(t,t,w).call(t):t.keybinds.end.includes(n)&&t.end()}}),document.addEventListener("click",p(t,t,C).click,!1),document.addEventListener("keydown",p(t,t,C).keyDown,!1),function(t,e,n){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return n}(this,g,b).call(this)}var e,n,o;return e=t,o=[{key:"start",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.defaultOptions;if(!e)throw new Error("The components parameter is required.");if(Object.keys(e).length<=0)throw new Error("The components parameter is required.");if(t.instantiated)return!1;d(t,t,E,e),d(t,t,T,!0),d(t,t,A,s(s({},t.defaultOptions),n)),new this}},{key:"end",value:function(){var e,n,o=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!t.instantiated)return!1;var i=document.querySelector(p(t,t,k));null===(e=r().getInstance(p(t,t,k)))||void 0===e||e.dispose(),i.removeAttribute("data-vs5-tutorial-target"),null===(n=i.querySelector("#vs5-tutorial-overlay"))||void 0===n||n.remove();var s=p(t,t,E)[p(t,t,k)];Object.keys(s).includes("callbackEnd")&&!o&&(console.log(s),s.callbackEnd()),d(t,t,j,0),d(t,t,k,null),d(t,t,T,!1),t.instantiated=!1,document.removeEventListener("click",p(t,t,C).click,!1),document.removeEventListener("keydown",p(t,t,C).keydown,!1),document.body.classList.remove("highlight"),document.body.querySelector("#vs5-tutorial-backdrop").remove()}},{key:"defaultKeybinds",get:function(){return s({},p(t,t,x))}},{key:"defaultOptions",get:function(){return s(s({},p(t,t,O)),{},{arrow:s({},p(t,t,O).arrow),callbacks:s({},p(t,t,O).callbacks)})}},{key:"options",get:function(){return(null===p(t,t,A)||Object.keys(p(t,t,A)).length<=0)&&d(t,t,A,t.defaultOptions),s(s({},p(t,t,A)),{},{arrow:s({},p(t,t,A).arrow),callbacks:s({},p(t,t,A).callbacks)})}},{key:"components",get:function(){return JSON.parse(JSON.stringify(p(t,t,E)))}},{key:"updateOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.defaultOptions;d(this,t,A,s(s({},t.defaultOptions),e))}},{key:"setOption",value:function(e,n){var r=e.split(/\./g);e=r.pop();var o=p(t,t,A);(null===o||Object.keys(o).length<=0)&&(o=t.defaultOptions);var i=r.reduce((function(t,e){return t[e]}),o);i[e]=n}}],(n=null)&&a(e.prototype,n),o&&a(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}();function b(){var e;if(t.instantiated)return!1;var n=document.body;null===(e=document.getElementById("vs5-tutorial-backdrop"))||void 0===e||e.remove(),n.classList.add("highlight"),n.insertAdjacentHTML("beforeend",'\n\t\t<div id="vs5-tutorial-backdrop">\n\t\t\t<div class="vs5-tutorial-text-container">\n\t\t\t\t<span class="vs5-tutorial-text">Press <code>Esc</code> to exit tutorial...</span>\n\t\t\t\t<span class="vs5-tutorial-text">Click anywhere outside the popup to proceed...</span>\n\t\t\t</div>\n\t\t</div>\n\t\t'),t.instantiated=!0,f(t,t,_).call(t,0)}function y(){if(p(t,t,j)-1<=0)return!1;var e=p(t,t,E)[p(t,t,k)];Object.keys(e).includes("callbackEnd")&&e.callbackEnd();var n=r().getInstance(p(t,t,k));n._element.removeAttribute("role"),n._element.removeAttribute("data-bs-selector"),n._element.removeAttribute("data-bs-html"),n._element.removeAttribute("data-bs-placement"),n._element.removeAttribute("data-bs-toggle"),n._element.removeAttribute("data-bs-trigger"),n._element.removeAttribute("data-bs-title"),n._element.removeAttribute("data-bs-content"),n._element.removeAttribute("data-vs5-tutorial-target"),n.dispose(),d(t,t,j,p(t,t,j)-2),d(t,t,k,p(t,t,j)>0?Object.keys(p(t,t,E))[p(t,t,j)-1]:null),f(this,t,_).call(this,p(t,t,j))}function w(){if(p(t,t,j)-1>=0){var e=p(t,t,E)[p(t,t,k)];Object.keys(e).includes("callbackEnd")&&e.callbackEnd();var n=r().getInstance(p(t,t,k));n._element.removeAttribute("role"),n._element.removeAttribute("data-bs-selector"),n._element.removeAttribute("data-bs-html"),n._element.removeAttribute("data-bs-placement"),n._element.removeAttribute("data-bs-toggle"),n._element.removeAttribute("data-bs-trigger"),n._element.removeAttribute("data-bs-title"),n._element.removeAttribute("data-bs-content"),n._element.removeAttribute("data-vs5-tutorial-target"),n.dispose()}var o=Object.keys(p(t,t,E)).length;if(p(t,t,j)>=o)return document.removeEventListener("click",p(t,t,C).click),document.removeEventListener("keydown",p(t,t,C).keyDown),t.end(!0),!1;t.instantiated=!0,f(t,t,_).call(t,p(t,t,j))}function _(e){var n,o,i=Object.keys(p(t,t,E))[e++],s=p(t,t,E)[i];Object.keys(s).includes("callbackInit")&&s.callbackInit();var a;null!==p(t,t,k)&&(null===(a=document.querySelector(p(t,t,k)).querySelector("#vs5-tutorial-overlay"))||void 0===a||a.remove());var l=document.querySelector(i);l.setAttribute("data-vs5-tutorial-target",""),l.insertAdjacentHTML("beforeend",'<div id="vs5-tutorial-overlay"></div>');var c=null!==(n=s.content)&&void 0!==n?n:i;p(t,t,A).arrowBtns&&(p(t,t,A).includePrev?c+='\n\t\t\t\t<div class="vs5-tutorial-bottom vs5-tutorial-prev-included">\n\t\t\t\t\t<span class="vs5-tutorial-button vs5-tutorial-left-arrow '.concat(p(t,t,j)-1<0?"disabled":"",'">').concat(p(t,t,A).arrow.left.replaceAll('"',"'"),'</span>\n\t\t\t\t\t<span class="vs5-tutorial-button vs5-tutorial-right-arrow">').concat(p(t,t,A).arrow.right.replaceAll('"',"'"),"</span>\n\t\t\t\t</div>\n\t\t\t\t"):c+='\n\t\t\t\t\t<div class="vs5-tutorial-bottom">\n\t\t\t\t\t\t<span class="vs5-tutorial-button vs5-tutorial-exit-btn">Exit</span>\n\t\t\t\t\t\t<span class="vs5-tutorial-button vs5-tutorial-right-arrow">'.concat(t.options.arrow.right.replaceAll('"',"'"),"</span>\n\t\t\t\t\t</div>\n\t\t\t\t")),l.setAttribute("role","button"),l.setAttribute("data-bs-selector",i),l.setAttribute("data-bs-html","true"),l.setAttribute("data-bs-placement","top"),l.setAttribute("data-bs-toggle","popover"),l.setAttribute("data-bs-trigger","focus"),l.setAttribute("data-bs-title",null!==(o=s.title)&&void 0!==o?o:i),l.setAttribute("data-bs-content",c);var u=new(r())(i,{html:!0,sanitize:!1,trigger:"manual",customClass:"vs5-tutorial-popover"});u.show(),u.tip.querySelector("h3").insertAdjacentHTML("beforeend",'\n\t\t\t<span class="vs5-close-container">\n\t\t\t\t<button type="button" class="btn-close" aria-label="Close" id="vs5EndTutorial"></button>\n\t\t\t</span>\n\t\t\t'),l.scrollIntoView({behavior:"auto",block:"center",inline:"center"}),d(t,t,j,e),d(t,t,k,i)}t=v;var O={writable:!0,value:{arrowBtns:!1,arrow:{left:"Prev",right:"Next"},includePrev:!1,callbacks:{start:null,end:null}}},x={writable:!0,value:{prev:[37],next:[13,32,39],end:[27,35]}};c(v,"keybinds",JSON.parse(JSON.stringify(p(t,t,x))));var E={writable:!0,value:null},A={writable:!0,value:null},T={writable:!0,value:!1};c(v,"instantiated",!1);var j={writable:!0,value:0},k={writable:!0,value:null},C={writable:!0,value:null};window.Tutorial=v,$((function(){$("app-category").each((function(t,e){var n,r,o,i=$(e),s=i.data(),a="";i.find("sub-application").each((function(t,e){var n,r,o,i,s,l,c,u,f=$(e).data();a+='\n\t\t\t<div class="app" id="'.concat(null!==(n=null!==(r=f.id)&&void 0!==r?r:null===(o=f.title)||void 0===o?void 0:o.toLowerCase().replaceAll(/\(\w+\)/g,"").replaceAll(/\s{2,}|\s/g,"-"))&&void 0!==n?n:"sub-application-".concat(t),'">\n\t\t\t\t<a href="').concat(null!==(i=f.link)&&void 0!==i?i:"/",'">\n\t\t\t\t\t<img src="').concat(null!==(s=f.img)&&void 0!==s?s:"resources/favicon.png",'" alt="').concat(null!==(l=f.title)&&void 0!==l?l:"Sub-Application",'" class="app-thumbnail"/>\n\n\t\t\t\t\t<div class="app-title-container">\n\t\t\t\t\t\t<span class="app-title">\n\t\t\t\t\t\t\t').concat(null!==(c=f.title)&&void 0!==c?c:"Sub-Application",'\n\t\t\t\t\t\t\t<small class="app-description">').concat(null!==(u=f.desc)&&void 0!==u?u:"A sub-application","</small>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t")}));var l='\n\t\t<div class="card '.concat(null!==(n=s.addClass)&&void 0!==n?n:"",'">\n\t\t\t<h5 class="card-header text-center ').concat(null!==(r=s.addTitleClass)&&void 0!==r?r:"",'">').concat(null!==(o=s.category)&&void 0!==o?o:"Sub-Application Category",'</h5>\n\n\t\t\t<div class="card-body d-flex flex-row overflow-x-auto sub-application-list" draggable="false">\n\t\t\t\t').concat(a,"\n\t\t\t</div>\n\t\t</div>\n\t\t");$(l).insertAfter(i),i.remove()})),"true"===localStorage.getItem("tutorial.hub")||D()}));var S=0,D=function t(){if(null===document.querySelector("#title-bar")&&S<10)return S++,setTimeout(t,100),!1;v.start({"#title-bar":{title:"Title Bar",content:"Contains the title of the current open sub-application. The window controls are also located here, along with the options/configuration"},"#title":{title:"Title",content:"This is where the sub-application title is located. Its title changes when changing applications so you will always know where you are."},"#title-bar-btns":{title:"Window Controls and Options",content:"This is where the minimize, maximize/restore, close, and options button is located. You know the drill here!<br>The options on the other hand, lets you configure your update options."},"#str-gen":{title:"String Generator",content:"Creates a string composed of random characters. It could be as short as 1 character, or as long as 255 characters."},"#dtr-gen":{title:"DTR Generator",content:"Creates a DTR from a pre-defined DTR template. Allows mass creation of DTR by just providing a text file with names per single line and providing desired values to the inputs."},"#dtr-tmp-gen":{title:"DTR Template Generator",content:"Creates a DTR Template that could be used by the DTR Generator. It allows you to create a template with a custom set of inputs and outputs."}}),localStorage.setItem("tutorial.hub","true")}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,